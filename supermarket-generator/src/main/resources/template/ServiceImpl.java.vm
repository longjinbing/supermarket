package ${package}.serviceImpl;

import ${package}.repository.${className}Repository;
import ${package}.entity.${className};
import ${package}.service.${className}Service;
import com.ljb.util.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import java.util.List;
import com.ljb.shiro.ShiroUtils;
import java.util.Map;

/**
 * ${comments}Service实现类
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Service
public class ${className}ServiceImpl implements ${className}Service {
    @Autowired
    private ${className}Repository ${classname}Repository;
    
    @Override
    public ${className} queryObject(${pk.attrType} ${pk.attrname}) {
        return ${classname}Repository.findOne(${pk.attrname});
    }

    @Override
    public Page<${className}> queryList(Map<String, Object> map) {
       Query query = new Query<${className}>(map);
       return ${classname}Repository.findAll(query.getSpecification(), query.getPageable());
    }
    
     @Override
    public List<${className}> queryAll(Map<String, Object> map){
    	Query query = new Query<${className}>(map);
       return ${classname}Repository.findAll(query.getSpecification());
    }

    @Override
    public Long queryTotal(Map<String, Object> map) {
        Query query = new Query<${className}>(map);
       return ${classname}Repository.count(query.getSpecification());
    }
    
    
    @Override
	public ${className} save(${className} entity) {
#foreach($column in $columns)
#if($column.attrname == "createId" )
		entity.setCreateId(ShiroUtils.getSysUserId());
#end
#end
		return ${classname}Repository.save(entity);
	}

    @Override
    public ${className} update(${className} entity) {
#foreach($column in $columns)
#if($column.attrname == "updateId" )
		entity.setUpdateId(ShiroUtils.getSysUserId());
#end
#end
        return ${classname}Repository.save(entity);
    }

    @Override
    public void delete(${pk.attrType} ${pk.attrname}) {
    	${classname}Repository.deleteById(${pk.attrname});
    }

    @Override
    public void deleteBatch(${pk.attrType}[] ${pk.attrname}s) {
      for(${pk.attrType} ${pk.attrname}: ${pk.attrname}s ){
      	delete(${pk.attrname});
      }
    }
}
